/**
 * This file was generator by Fwmf Generated
 * ！！！Do not modify this file！！ 
 *
 * @fwmf.generated 2018-11-15 08:50:34
 */
package cn.faury.fwmf.module.service.category.generate.sqlProvider;

import cn.faury.fdk.common.utils.StringUtil;
import cn.faury.fwmf.module.api.category.generate.bean.CategoryRTagGenerateBean;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class CategoryRTagGenerateSqlProvider {

    /**
     * This method was generated by Fwmf Generated.
     * This method corresponds to the database table product_t_category_r_tag
     *
     * @fwmf.generated 2018-11-15 08:50:34
     */
    public String insertSelective(CategoryRTagGenerateBean record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("product_t_category_r_tag");
        
        if (record.getId() != null) {
            sql.VALUES("ID", "#{id,jdbcType=BIGINT}");
        }
        
        if (record.getProductCategoryId() != null) {
            sql.VALUES("PRODUCT_CATEGORY_ID", "#{productCategoryId,jdbcType=BIGINT}");
        }
        
        if (record.getTagCategoryId() != null) {
            sql.VALUES("TAG_CATEGORY_ID", "#{tagCategoryId,jdbcType=BIGINT}");
        }
        
        if (record.getTagId() != null) {
            sql.VALUES("TAG_ID", "#{tagId,jdbcType=BIGINT}");
        }
        
        if (record.getDisplayOrder() != null) {
            sql.VALUES("DISPLAY_ORDER", "#{displayOrder,jdbcType=INTEGER}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by Fwmf Generated.
     * This method corresponds to the database table product_t_category_r_tag
     *
     * @fwmf.generated 2018-11-15 08:50:34
     */
    public String updateByPrimaryKeySelective(CategoryRTagGenerateBean record) {
        SQL sql = new SQL();
        sql.UPDATE("product_t_category_r_tag");
        
        if (record.getProductCategoryId() != null) {
            sql.SET("PRODUCT_CATEGORY_ID = #{productCategoryId,jdbcType=BIGINT}");
        }
        
        if (record.getTagCategoryId() != null) {
            sql.SET("TAG_CATEGORY_ID = #{tagCategoryId,jdbcType=BIGINT}");
        }
        
        if (record.getTagId() != null) {
            sql.SET("TAG_ID = #{tagId,jdbcType=BIGINT}");
        }
        
        if (record.getDisplayOrder() != null) {
            sql.SET("DISPLAY_ORDER = #{displayOrder,jdbcType=INTEGER}");
        }
        
        sql.WHERE("ID = #{id,jdbcType=BIGINT}");
        
        return sql.toString();
    }

    /**
     * This method was generated by Fwmf Generated.
     * This method corresponds to the database table product_t_category_r_tag
     *
     * @fwmf.generated 2018-11-15 08:50:34
     */
    public String search(Map<String, Object> params) {
        SQL sql = new SQL();
        sql.SELECT("ID, PRODUCT_CATEGORY_ID, TAG_CATEGORY_ID, TAG_ID, DISPLAY_ORDER");
        
        sql.FROM("product_t_category_r_tag");
        
        if (params.get("id") != null){
            if (!(params.get("id") instanceof String) || StringUtil.isNotEmpty((String) params.get("id"))){
                sql.WHERE("ID=#{id,jdbcType=BIGINT}");
            }
        }
        if (params.get("ids") != null && params.get("ids") instanceof List) {
            List list = (List) params.get("ids");
            if (list != null && list.size() > 0) {
                StringBuilder inClause = new StringBuilder();
                for (int i = 0; i < list.size(); i++) {
                    inClause.append("#{ids[").append(i).append("],jdbcType=BIGINT},");
                }
                inClause.setLength(inClause.length() - 1);
                sql.WHERE("ID IN (" + inClause.toString() + ")");
            }
        }
        if (params.get("productCategoryId") != null){
            if (!(params.get("productCategoryId") instanceof String) || StringUtil.isNotEmpty((String) params.get("productCategoryId"))){
                sql.WHERE("PRODUCT_CATEGORY_ID=#{productCategoryId,jdbcType=BIGINT}");
            }
        }
        if (params.get("tagCategoryId") != null){
            if (!(params.get("tagCategoryId") instanceof String) || StringUtil.isNotEmpty((String) params.get("tagCategoryId"))){
                sql.WHERE("TAG_CATEGORY_ID=#{tagCategoryId,jdbcType=BIGINT}");
            }
        }
        if (params.get("tagId") != null){
            if (!(params.get("tagId") instanceof String) || StringUtil.isNotEmpty((String) params.get("tagId"))){
                sql.WHERE("TAG_ID=#{tagId,jdbcType=BIGINT}");
            }
        }
        if (params.get("displayOrder") != null){
            if (!(params.get("displayOrder") instanceof String) || StringUtil.isNotEmpty((String) params.get("displayOrder"))){
                sql.WHERE("DISPLAY_ORDER=#{displayOrder,jdbcType=INTEGER}");
            }
        }
        if (params.get("ORDER_BY") != null){
            String orderBy = (String) params.get("ORDER_BY");
            String[] columns = orderBy.split(",");
            for (int i = 0; i < columns.length; i = i + 2) {
                if (i+1<columns.length){
                    sql.ORDER_BY(String.format("%s %s",columns[i],columns[i+1]));
                } else {
                    sql.ORDER_BY(columns[i]);
                }
            }
        }
        
        return sql.toString();
    }
}