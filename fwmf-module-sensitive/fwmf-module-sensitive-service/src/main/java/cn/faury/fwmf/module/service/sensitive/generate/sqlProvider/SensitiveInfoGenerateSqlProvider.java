/**
 * This file was generator by Fwmf Generated
 * ！！！Do not modify this file！！ 
 *
 * @fwmf.generated 2018-11-14 22:29:25
 */
package cn.faury.fwmf.module.service.sensitive.generate.sqlProvider;

import cn.faury.fdk.common.utils.StringUtil;
import cn.faury.fwmf.module.api.sensitive.generate.bean.SensitiveInfoGenerateBean;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class SensitiveInfoGenerateSqlProvider {

    /**
     * This method was generated by Fwmf Generated.
     * This method corresponds to the database table sys_t_sensitive_info
     *
     * @fwmf.generated 2018-11-14 22:29:25
     */
    public String insertSelective(SensitiveInfoGenerateBean record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("sys_t_sensitive_info");
        
        if (record.getSensitiveId() != null) {
            sql.VALUES("SENSITIVE_ID", "#{sensitiveId,jdbcType=BIGINT}");
        }
        
        if (record.getSensitiveValue() != null) {
            sql.VALUES("SENSITIVE_VALUE", "#{sensitiveValue,jdbcType=VARCHAR}");
        }
        
        if (record.getReplaceValue() != null) {
            sql.VALUES("REPLACE_VALUE", "#{replaceValue,jdbcType=VARCHAR}");
        }
        
        if (record.getCreatePerson() != null) {
            sql.VALUES("CREATE_PERSON", "#{createPerson,jdbcType=BIGINT}");
        }
        
        if (record.getCreatePersonName() != null) {
            sql.VALUES("CREATE_PERSON_NAME", "#{createPersonName,jdbcType=VARCHAR}");
        }
        
        if (record.getCreateTime() != null) {
            sql.VALUES("CREATE_TIME", "#{createTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUpdatePerson() != null) {
            sql.VALUES("UPDATE_PERSON", "#{updatePerson,jdbcType=BIGINT}");
        }
        
        if (record.getUpdatePersonName() != null) {
            sql.VALUES("UPDATE_PERSON_NAME", "#{updatePersonName,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.VALUES("UPDATE_TIME", "#{updateTime,jdbcType=TIMESTAMP}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by Fwmf Generated.
     * This method corresponds to the database table sys_t_sensitive_info
     *
     * @fwmf.generated 2018-11-14 22:29:25
     */
    public String updateByPrimaryKeySelective(SensitiveInfoGenerateBean record) {
        SQL sql = new SQL();
        sql.UPDATE("sys_t_sensitive_info");
        
        if (record.getSensitiveValue() != null) {
            sql.SET("SENSITIVE_VALUE = #{sensitiveValue,jdbcType=VARCHAR}");
        }
        
        if (record.getReplaceValue() != null) {
            sql.SET("REPLACE_VALUE = #{replaceValue,jdbcType=VARCHAR}");
        }
        
        if (record.getCreatePerson() != null) {
            sql.SET("CREATE_PERSON = #{createPerson,jdbcType=BIGINT}");
        }
        
        if (record.getCreatePersonName() != null) {
            sql.SET("CREATE_PERSON_NAME = #{createPersonName,jdbcType=VARCHAR}");
        }
        
        if (record.getCreateTime() != null) {
            sql.SET("CREATE_TIME = #{createTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUpdatePerson() != null) {
            sql.SET("UPDATE_PERSON = #{updatePerson,jdbcType=BIGINT}");
        }
        
        if (record.getUpdatePersonName() != null) {
            sql.SET("UPDATE_PERSON_NAME = #{updatePersonName,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.SET("UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP}");
        }
        
        sql.WHERE("SENSITIVE_ID = #{sensitiveId,jdbcType=BIGINT}");
        
        return sql.toString();
    }

    /**
     * This method was generated by Fwmf Generated.
     * This method corresponds to the database table sys_t_sensitive_info
     *
     * @fwmf.generated 2018-11-14 22:29:25
     */
    public String search(Map<String, Object> params) {
        SQL sql = new SQL();
        sql.SELECT("SENSITIVE_ID, SENSITIVE_VALUE, REPLACE_VALUE, CREATE_PERSON, CREATE_PERSON_NAME");
        sql.SELECT("CREATE_TIME, UPDATE_PERSON, UPDATE_PERSON_NAME, UPDATE_TIME");
        
        sql.FROM("sys_t_sensitive_info");
        
        if (params.get("sensitiveId") != null){
            if (!(params.get("sensitiveId") instanceof String) || StringUtil.isNotEmpty((String) params.get("sensitiveId"))){
                sql.WHERE("SENSITIVE_ID=#{sensitiveId,jdbcType=BIGINT}");
            }
        }
        if (params.get("ids") != null && params.get("ids") instanceof List) {
            List list = (List) params.get("ids");
            if (list != null && list.size() > 0) {
                StringBuilder inClause = new StringBuilder();
                for (int i = 0; i < list.size(); i++) {
                    inClause.append("#{ids[").append(i).append("],jdbcType=BIGINT},");
                }
                inClause.setLength(inClause.length() - 1);
                sql.WHERE("SENSITIVE_ID IN (" + inClause.toString() + ")");
            }
        }
        if (params.get("sensitiveValue") != null){
            if (!(params.get("sensitiveValue") instanceof String) || StringUtil.isNotEmpty((String) params.get("sensitiveValue"))){
                sql.WHERE("SENSITIVE_VALUE=#{sensitiveValue,jdbcType=VARCHAR}");
            }
        }
        if (params.get("sensitiveValueLike")!=null){
            if (!(params.get("sensitiveValueLike") instanceof String) || StringUtil.isNotEmpty((String) params.get("sensitiveValueLike"))){
                sql.WHERE("SENSITIVE_VALUE LIKE CONCAT('%',#{sensitiveValueLike,jdbcType=VARCHAR},'%')");
            }
        }
        if (params.get("replaceValue") != null){
            if (!(params.get("replaceValue") instanceof String) || StringUtil.isNotEmpty((String) params.get("replaceValue"))){
                sql.WHERE("REPLACE_VALUE=#{replaceValue,jdbcType=VARCHAR}");
            }
        }
        if (params.get("replaceValueLike")!=null){
            if (!(params.get("replaceValueLike") instanceof String) || StringUtil.isNotEmpty((String) params.get("replaceValueLike"))){
                sql.WHERE("REPLACE_VALUE LIKE CONCAT('%',#{replaceValueLike,jdbcType=VARCHAR},'%')");
            }
        }
        if (params.get("createPerson") != null){
            if (!(params.get("createPerson") instanceof String) || StringUtil.isNotEmpty((String) params.get("createPerson"))){
                sql.WHERE("CREATE_PERSON=#{createPerson,jdbcType=BIGINT}");
            }
        }
        if (params.get("createPersonName") != null){
            if (!(params.get("createPersonName") instanceof String) || StringUtil.isNotEmpty((String) params.get("createPersonName"))){
                sql.WHERE("CREATE_PERSON_NAME=#{createPersonName,jdbcType=VARCHAR}");
            }
        }
        if (params.get("createPersonNameLike")!=null){
            if (!(params.get("createPersonNameLike") instanceof String) || StringUtil.isNotEmpty((String) params.get("createPersonNameLike"))){
                sql.WHERE("CREATE_PERSON_NAME LIKE CONCAT('%',#{createPersonNameLike,jdbcType=VARCHAR},'%')");
            }
        }
        if (params.get("createTime") != null){
            if (!(params.get("createTime") instanceof String) || StringUtil.isNotEmpty((String) params.get("createTime"))){
                sql.WHERE("CREATE_TIME=#{createTime,jdbcType=TIMESTAMP}");
            }
        }
        if (params.get("createTimeStart")!=null){
            if (!(params.get("createTimeStart") instanceof String) || StringUtil.isNotEmpty((String) params.get("createTimeStart"))){
                sql.WHERE("CREATE_TIME >= #{createTimeStart,jdbcType=TIMESTAMP}");
            }
        }
        if (params.get("createTimeEnd")!=null){
            if (!(params.get("createTimeEnd") instanceof String) || StringUtil.isNotEmpty((String) params.get("createTimeEnd"))){
                sql.WHERE("CREATE_TIME <= #{createTimeEnd,jdbcType=TIMESTAMP}");
            }
        }
        if (params.get("updatePerson") != null){
            if (!(params.get("updatePerson") instanceof String) || StringUtil.isNotEmpty((String) params.get("updatePerson"))){
                sql.WHERE("UPDATE_PERSON=#{updatePerson,jdbcType=BIGINT}");
            }
        }
        if (params.get("updatePersonName") != null){
            if (!(params.get("updatePersonName") instanceof String) || StringUtil.isNotEmpty((String) params.get("updatePersonName"))){
                sql.WHERE("UPDATE_PERSON_NAME=#{updatePersonName,jdbcType=VARCHAR}");
            }
        }
        if (params.get("updatePersonNameLike")!=null){
            if (!(params.get("updatePersonNameLike") instanceof String) || StringUtil.isNotEmpty((String) params.get("updatePersonNameLike"))){
                sql.WHERE("UPDATE_PERSON_NAME LIKE CONCAT('%',#{updatePersonNameLike,jdbcType=VARCHAR},'%')");
            }
        }
        if (params.get("updateTime") != null){
            if (!(params.get("updateTime") instanceof String) || StringUtil.isNotEmpty((String) params.get("updateTime"))){
                sql.WHERE("UPDATE_TIME=#{updateTime,jdbcType=TIMESTAMP}");
            }
        }
        if (params.get("updateTimeStart")!=null){
            if (!(params.get("updateTimeStart") instanceof String) || StringUtil.isNotEmpty((String) params.get("updateTimeStart"))){
                sql.WHERE("UPDATE_TIME >= #{updateTimeStart,jdbcType=TIMESTAMP}");
            }
        }
        if (params.get("updateTimeEnd")!=null){
            if (!(params.get("updateTimeEnd") instanceof String) || StringUtil.isNotEmpty((String) params.get("updateTimeEnd"))){
                sql.WHERE("UPDATE_TIME <= #{updateTimeEnd,jdbcType=TIMESTAMP}");
            }
        }
        if (params.get("ORDER_BY") != null){
            String orderBy = (String) params.get("ORDER_BY");
            String[] columns = orderBy.split(",");
            for (int i = 0; i < columns.length; i = i + 2) {
                if (i+1<columns.length){
                    sql.ORDER_BY(String.format("%s %s",columns[i],columns[i+1]));
                } else {
                    sql.ORDER_BY(columns[i]);
                }
            }
        }
        
        return sql.toString();
    }
}