/**
 * This file was generator by Fwmf Generated
 * ！！！Do not modify this file！！ 
 *
 * @fwmf.generated 2018-11-14 21:26:24
 */
package cn.faury.fwmf.module.service.qa.generate.sqlProvider;

import cn.faury.fdk.common.utils.StringUtil;
import cn.faury.fwmf.module.api.qa.generate.bean.QaTxtGenerateBeanWithBLOBs;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class QaTxtGenerateSqlProvider {

    /**
     * This method was generated by Fwmf Generated.
     * This method corresponds to the database table sys_t_qa_txt
     *
     * @fwmf.generated 2018-11-14 21:26:24
     */
    public String insertSelective(QaTxtGenerateBeanWithBLOBs record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("sys_t_qa_txt");
        
        if (record.getId() != null) {
            sql.VALUES("ID", "#{id,jdbcType=BIGINT}");
        }
        
        if (record.getQaId() != null) {
            sql.VALUES("QA_ID", "#{qaId,jdbcType=BIGINT}");
        }
        
        if (record.getContentJson() != null) {
            sql.VALUES("CONTENT_JSON", "#{contentJson,jdbcType=LONGVARCHAR}");
        }
        
        if (record.getContentHtml() != null) {
            sql.VALUES("CONTENT_HTML", "#{contentHtml,jdbcType=LONGVARCHAR}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by Fwmf Generated.
     * This method corresponds to the database table sys_t_qa_txt
     *
     * @fwmf.generated 2018-11-14 21:26:24
     */
    public String updateByPrimaryKeySelective(QaTxtGenerateBeanWithBLOBs record) {
        SQL sql = new SQL();
        sql.UPDATE("sys_t_qa_txt");
        
        if (record.getQaId() != null) {
            sql.SET("QA_ID = #{qaId,jdbcType=BIGINT}");
        }
        
        if (record.getContentJson() != null) {
            sql.SET("CONTENT_JSON = #{contentJson,jdbcType=LONGVARCHAR}");
        }
        
        if (record.getContentHtml() != null) {
            sql.SET("CONTENT_HTML = #{contentHtml,jdbcType=LONGVARCHAR}");
        }
        
        sql.WHERE("ID = #{id,jdbcType=BIGINT}");
        
        return sql.toString();
    }

    /**
     * This method was generated by Fwmf Generated.
     * This method corresponds to the database table sys_t_qa_txt
     *
     * @fwmf.generated 2018-11-14 21:26:24
     */
    public String search(Map<String, Object> params) {
        SQL sql = new SQL();
        sql.SELECT("ID, QA_ID, CONTENT_JSON, CONTENT_HTML");
        
        sql.FROM("sys_t_qa_txt");
        
        if (params.get("id") != null){
            if (!(params.get("id") instanceof String) || StringUtil.isNotEmpty((String) params.get("id"))){
                sql.WHERE("ID=#{id,jdbcType=BIGINT}");
            }
        }
        if (params.get("ids") != null && params.get("ids") instanceof List) {
            List list = (List) params.get("ids");
            if (list != null && list.size() > 0) {
                StringBuilder inClause = new StringBuilder();
                for (int i = 0; i < list.size(); i++) {
                    inClause.append("#{ids[").append(i).append("],jdbcType=BIGINT},");
                }
                inClause.setLength(inClause.length() - 1);
                sql.WHERE("ID IN (" + inClause.toString() + ")");
            }
        }
        if (params.get("qaId") != null){
            if (!(params.get("qaId") instanceof String) || StringUtil.isNotEmpty((String) params.get("qaId"))){
                sql.WHERE("QA_ID=#{qaId,jdbcType=BIGINT}");
            }
        }
        if (params.get("contentJson") != null){
            if (!(params.get("contentJson") instanceof String) || StringUtil.isNotEmpty((String) params.get("contentJson"))){
                sql.WHERE("CONTENT_JSON=#{contentJson,jdbcType=LONGVARCHAR}");
            }
        }
        if (params.get("contentJsonLike")!=null){
            if (!(params.get("contentJsonLike") instanceof String) || StringUtil.isNotEmpty((String) params.get("contentJsonLike"))){
                sql.WHERE("CONTENT_JSON LIKE CONCAT('%',#{contentJsonLike,jdbcType=LONGVARCHAR},'%')");
            }
        }
        if (params.get("contentHtml") != null){
            if (!(params.get("contentHtml") instanceof String) || StringUtil.isNotEmpty((String) params.get("contentHtml"))){
                sql.WHERE("CONTENT_HTML=#{contentHtml,jdbcType=LONGVARCHAR}");
            }
        }
        if (params.get("contentHtmlLike")!=null){
            if (!(params.get("contentHtmlLike") instanceof String) || StringUtil.isNotEmpty((String) params.get("contentHtmlLike"))){
                sql.WHERE("CONTENT_HTML LIKE CONCAT('%',#{contentHtmlLike,jdbcType=LONGVARCHAR},'%')");
            }
        }
        if (params.get("ORDER_BY") != null){
            String orderBy = (String) params.get("ORDER_BY");
            String[] columns = orderBy.split(",");
            for (int i = 0; i < columns.length; i = i + 2) {
                if (i+1<columns.length){
                    sql.ORDER_BY(String.format("%s %s",columns[i],columns[i+1]));
                } else {
                    sql.ORDER_BY(columns[i]);
                }
            }
        }
        
        return sql.toString();
    }
}