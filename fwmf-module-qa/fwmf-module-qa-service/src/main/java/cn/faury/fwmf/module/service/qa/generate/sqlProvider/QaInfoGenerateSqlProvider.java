/**
 * This file was generator by Fwmf Generated
 * ！！！Do not modify this file！！ 
 *
 * @fwmf.generated 2018-11-14 21:26:24
 */
package cn.faury.fwmf.module.service.qa.generate.sqlProvider;

import cn.faury.fdk.common.utils.StringUtil;
import cn.faury.fwmf.module.api.qa.generate.bean.QaInfoGenerateBean;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class QaInfoGenerateSqlProvider {

    /**
     * This method was generated by Fwmf Generated.
     * This method corresponds to the database table sys_t_qa_info
     *
     * @fwmf.generated 2018-11-14 21:26:24
     */
    public String insertSelective(QaInfoGenerateBean record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("sys_t_qa_info");
        
        if (record.getQaId() != null) {
            sql.VALUES("QA_ID", "#{qaId,jdbcType=BIGINT}");
        }
        
        if (record.getQaTitle() != null) {
            sql.VALUES("QA_TITLE", "#{qaTitle,jdbcType=VARCHAR}");
        }
        
        if (record.getSort() != null) {
            sql.VALUES("SORT", "#{sort,jdbcType=INTEGER}");
        }
        
        if (record.getIsDelete() != null) {
            sql.VALUES("IS_DELETE", "#{isDelete,jdbcType=CHAR}");
        }
        
        if (record.getCreatePerson() != null) {
            sql.VALUES("CREATE_PERSON", "#{createPerson,jdbcType=BIGINT}");
        }
        
        if (record.getCreatePersonName() != null) {
            sql.VALUES("CREATE_PERSON_NAME", "#{createPersonName,jdbcType=VARCHAR}");
        }
        
        if (record.getCreateTime() != null) {
            sql.VALUES("CREATE_TIME", "#{createTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUpdatePerson() != null) {
            sql.VALUES("UPDATE_PERSON", "#{updatePerson,jdbcType=BIGINT}");
        }
        
        if (record.getUpdatePersonName() != null) {
            sql.VALUES("UPDATE_PERSON_NAME", "#{updatePersonName,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.VALUES("UPDATE_TIME", "#{updateTime,jdbcType=TIMESTAMP}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by Fwmf Generated.
     * This method corresponds to the database table sys_t_qa_info
     *
     * @fwmf.generated 2018-11-14 21:26:24
     */
    public String updateByPrimaryKeySelective(QaInfoGenerateBean record) {
        SQL sql = new SQL();
        sql.UPDATE("sys_t_qa_info");
        
        if (record.getQaTitle() != null) {
            sql.SET("QA_TITLE = #{qaTitle,jdbcType=VARCHAR}");
        }
        
        if (record.getSort() != null) {
            sql.SET("SORT = #{sort,jdbcType=INTEGER}");
        }
        
        if (record.getIsDelete() != null) {
            sql.SET("IS_DELETE = #{isDelete,jdbcType=CHAR}");
        }
        
        if (record.getCreatePerson() != null) {
            sql.SET("CREATE_PERSON = #{createPerson,jdbcType=BIGINT}");
        }
        
        if (record.getCreatePersonName() != null) {
            sql.SET("CREATE_PERSON_NAME = #{createPersonName,jdbcType=VARCHAR}");
        }
        
        if (record.getCreateTime() != null) {
            sql.SET("CREATE_TIME = #{createTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUpdatePerson() != null) {
            sql.SET("UPDATE_PERSON = #{updatePerson,jdbcType=BIGINT}");
        }
        
        if (record.getUpdatePersonName() != null) {
            sql.SET("UPDATE_PERSON_NAME = #{updatePersonName,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.SET("UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP}");
        }
        
        sql.WHERE("QA_ID = #{qaId,jdbcType=BIGINT}");
        
        return sql.toString();
    }

    /**
     * This method was generated by Fwmf Generated.
     * This method corresponds to the database table sys_t_qa_info
     *
     * @fwmf.generated 2018-11-14 21:26:24
     */
    public String search(Map<String, Object> params) {
        SQL sql = new SQL();
        sql.SELECT("QA_ID, QA_TITLE, SORT, IS_DELETE, CREATE_PERSON, CREATE_PERSON_NAME, CREATE_TIME");
        sql.SELECT("UPDATE_PERSON, UPDATE_PERSON_NAME, UPDATE_TIME");
        
        sql.FROM("sys_t_qa_info");
        
        if (params.get("qaId") != null){
            if (!(params.get("qaId") instanceof String) || StringUtil.isNotEmpty((String) params.get("qaId"))){
                sql.WHERE("QA_ID=#{qaId,jdbcType=BIGINT}");
            }
        }
        if (params.get("ids") != null && params.get("ids") instanceof List) {
            List list = (List) params.get("ids");
            if (list != null && list.size() > 0) {
                StringBuilder inClause = new StringBuilder();
                for (int i = 0; i < list.size(); i++) {
                    inClause.append("#{ids[").append(i).append("],jdbcType=BIGINT},");
                }
                inClause.setLength(inClause.length() - 1);
                sql.WHERE("QA_ID IN (" + inClause.toString() + ")");
            }
        }
        if (params.get("qaTitle") != null){
            if (!(params.get("qaTitle") instanceof String) || StringUtil.isNotEmpty((String) params.get("qaTitle"))){
                sql.WHERE("QA_TITLE=#{qaTitle,jdbcType=VARCHAR}");
            }
        }
        if (params.get("qaTitleLike")!=null){
            if (!(params.get("qaTitleLike") instanceof String) || StringUtil.isNotEmpty((String) params.get("qaTitleLike"))){
                sql.WHERE("QA_TITLE LIKE CONCAT('%',#{qaTitleLike,jdbcType=VARCHAR},'%')");
            }
        }
        if (params.get("sort") != null){
            if (!(params.get("sort") instanceof String) || StringUtil.isNotEmpty((String) params.get("sort"))){
                sql.WHERE("SORT=#{sort,jdbcType=INTEGER}");
            }
        }
        if (params.get("isDelete") != null){
            if (!(params.get("isDelete") instanceof String) || StringUtil.isNotEmpty((String) params.get("isDelete"))){
                sql.WHERE("IS_DELETE=#{isDelete,jdbcType=CHAR}");
            }
        }
        if (params.get("isDeleteLike")!=null){
            if (!(params.get("isDeleteLike") instanceof String) || StringUtil.isNotEmpty((String) params.get("isDeleteLike"))){
                sql.WHERE("IS_DELETE LIKE CONCAT('%',#{isDeleteLike,jdbcType=CHAR},'%')");
            }
        }
        if (params.get("createPerson") != null){
            if (!(params.get("createPerson") instanceof String) || StringUtil.isNotEmpty((String) params.get("createPerson"))){
                sql.WHERE("CREATE_PERSON=#{createPerson,jdbcType=BIGINT}");
            }
        }
        if (params.get("createPersonName") != null){
            if (!(params.get("createPersonName") instanceof String) || StringUtil.isNotEmpty((String) params.get("createPersonName"))){
                sql.WHERE("CREATE_PERSON_NAME=#{createPersonName,jdbcType=VARCHAR}");
            }
        }
        if (params.get("createPersonNameLike")!=null){
            if (!(params.get("createPersonNameLike") instanceof String) || StringUtil.isNotEmpty((String) params.get("createPersonNameLike"))){
                sql.WHERE("CREATE_PERSON_NAME LIKE CONCAT('%',#{createPersonNameLike,jdbcType=VARCHAR},'%')");
            }
        }
        if (params.get("createTime") != null){
            if (!(params.get("createTime") instanceof String) || StringUtil.isNotEmpty((String) params.get("createTime"))){
                sql.WHERE("CREATE_TIME=#{createTime,jdbcType=TIMESTAMP}");
            }
        }
        if (params.get("createTimeStart")!=null){
            if (!(params.get("createTimeStart") instanceof String) || StringUtil.isNotEmpty((String) params.get("createTimeStart"))){
                sql.WHERE("CREATE_TIME >= #{createTimeStart,jdbcType=TIMESTAMP}");
            }
        }
        if (params.get("createTimeEnd")!=null){
            if (!(params.get("createTimeEnd") instanceof String) || StringUtil.isNotEmpty((String) params.get("createTimeEnd"))){
                sql.WHERE("CREATE_TIME <= #{createTimeEnd,jdbcType=TIMESTAMP}");
            }
        }
        if (params.get("updatePerson") != null){
            if (!(params.get("updatePerson") instanceof String) || StringUtil.isNotEmpty((String) params.get("updatePerson"))){
                sql.WHERE("UPDATE_PERSON=#{updatePerson,jdbcType=BIGINT}");
            }
        }
        if (params.get("updatePersonName") != null){
            if (!(params.get("updatePersonName") instanceof String) || StringUtil.isNotEmpty((String) params.get("updatePersonName"))){
                sql.WHERE("UPDATE_PERSON_NAME=#{updatePersonName,jdbcType=VARCHAR}");
            }
        }
        if (params.get("updatePersonNameLike")!=null){
            if (!(params.get("updatePersonNameLike") instanceof String) || StringUtil.isNotEmpty((String) params.get("updatePersonNameLike"))){
                sql.WHERE("UPDATE_PERSON_NAME LIKE CONCAT('%',#{updatePersonNameLike,jdbcType=VARCHAR},'%')");
            }
        }
        if (params.get("updateTime") != null){
            if (!(params.get("updateTime") instanceof String) || StringUtil.isNotEmpty((String) params.get("updateTime"))){
                sql.WHERE("UPDATE_TIME=#{updateTime,jdbcType=TIMESTAMP}");
            }
        }
        if (params.get("updateTimeStart")!=null){
            if (!(params.get("updateTimeStart") instanceof String) || StringUtil.isNotEmpty((String) params.get("updateTimeStart"))){
                sql.WHERE("UPDATE_TIME >= #{updateTimeStart,jdbcType=TIMESTAMP}");
            }
        }
        if (params.get("updateTimeEnd")!=null){
            if (!(params.get("updateTimeEnd") instanceof String) || StringUtil.isNotEmpty((String) params.get("updateTimeEnd"))){
                sql.WHERE("UPDATE_TIME <= #{updateTimeEnd,jdbcType=TIMESTAMP}");
            }
        }
        if (params.get("ORDER_BY") != null){
            String orderBy = (String) params.get("ORDER_BY");
            String[] columns = orderBy.split(",");
            for (int i = 0; i < columns.length; i = i + 2) {
                if (i+1<columns.length){
                    sql.ORDER_BY(String.format("%s %s",columns[i],columns[i+1]));
                } else {
                    sql.ORDER_BY(columns[i]);
                }
            }
        }
        
        return sql.toString();
    }
}