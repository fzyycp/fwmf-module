/**
 * This file was generator by Fwmf Generated
 * ！！！Do not modify this file！！ 
 *
 * @fwmf.generated 2018-11-14 15:41:39
 */
package cn.faury.fwmf.module.service.order.generate.sqlProvider;

import cn.faury.fdk.common.utils.StringUtil;
import cn.faury.fwmf.module.api.order.generate.bean.OrderRLogisticsGenerateBean;
import org.apache.ibatis.jdbc.SQL;

import java.util.List;
import java.util.Map;

public class OrderRLogisticsGenerateSqlProvider {

    /**
     * This method was generated by Fwmf Generated.
     * This method corresponds to the database table order_t_order_r_logistics
     *
     * @fwmf.generated 2018-11-14 15:41:39
     */
    public String insertSelective(OrderRLogisticsGenerateBean record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("order_t_order_r_logistics");
        
        if (record.getId() != null) {
            sql.VALUES("ID", "#{id,jdbcType=BIGINT}");
        }
        
        if (record.getOrderId() != null) {
            sql.VALUES("ORDER_ID", "#{orderId,jdbcType=BIGINT}");
        }
        
        if (record.getInsertTime() != null) {
            sql.VALUES("INSERT_TIME", "#{insertTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getAcceptTime() != null) {
            sql.VALUES("ACCEPT_TIME", "#{acceptTime,jdbcType=VARCHAR}");
        }
        
        if (record.getAcceptStation() != null) {
            sql.VALUES("ACCEPT_STATION", "#{acceptStation,jdbcType=VARCHAR}");
        }
        
        if (record.getState() != null) {
            sql.VALUES("STATE", "#{state,jdbcType=CHAR}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by Fwmf Generated.
     * This method corresponds to the database table order_t_order_r_logistics
     *
     * @fwmf.generated 2018-11-14 15:41:39
     */
    public String updateByPrimaryKeySelective(OrderRLogisticsGenerateBean record) {
        SQL sql = new SQL();
        sql.UPDATE("order_t_order_r_logistics");
        
        if (record.getOrderId() != null) {
            sql.SET("ORDER_ID = #{orderId,jdbcType=BIGINT}");
        }
        
        if (record.getInsertTime() != null) {
            sql.SET("INSERT_TIME = #{insertTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getAcceptTime() != null) {
            sql.SET("ACCEPT_TIME = #{acceptTime,jdbcType=VARCHAR}");
        }
        
        if (record.getAcceptStation() != null) {
            sql.SET("ACCEPT_STATION = #{acceptStation,jdbcType=VARCHAR}");
        }
        
        if (record.getState() != null) {
            sql.SET("STATE = #{state,jdbcType=CHAR}");
        }
        
        sql.WHERE("ID = #{id,jdbcType=BIGINT}");
        
        return sql.toString();
    }

    /**
     * This method was generated by Fwmf Generated.
     * This method corresponds to the database table order_t_order_r_logistics
     *
     * @fwmf.generated 2018-11-14 15:41:39
     */
    public String search(Map<String, Object> params) {
        SQL sql = new SQL();
        sql.SELECT("ID, ORDER_ID, INSERT_TIME, ACCEPT_TIME, ACCEPT_STATION, STATE");
        
        sql.FROM("order_t_order_r_logistics");
        
        if (params.get("id") != null){
            if (!(params.get("id") instanceof String) || StringUtil.isNotEmpty((String) params.get("id"))){
                sql.WHERE("ID=#{id,jdbcType=BIGINT}");
            }
        }
        if (params.get("ids") != null && params.get("ids") instanceof List) {
            List list = (List) params.get("ids");
            if (list != null && list.size() > 0) {
                StringBuilder inClause = new StringBuilder();
                for (int i = 0; i < list.size(); i++) {
                    inClause.append("#{ids[").append(i).append("],jdbcType=BIGINT},");
                }
                inClause.setLength(inClause.length() - 1);
                sql.WHERE("ID IN (" + inClause.toString() + ")");
            }
        }
        if (params.get("orderId") != null){
            if (!(params.get("orderId") instanceof String) || StringUtil.isNotEmpty((String) params.get("orderId"))){
                sql.WHERE("ORDER_ID=#{orderId,jdbcType=BIGINT}");
            }
        }
        if (params.get("insertTime") != null){
            if (!(params.get("insertTime") instanceof String) || StringUtil.isNotEmpty((String) params.get("insertTime"))){
                sql.WHERE("INSERT_TIME=#{insertTime,jdbcType=TIMESTAMP}");
            }
        }
        if (params.get("insertTimeStart")!=null){
            if (!(params.get("insertTimeStart") instanceof String) || StringUtil.isNotEmpty((String) params.get("insertTimeStart"))){
                sql.WHERE("INSERT_TIME >= #{insertTimeStart,jdbcType=TIMESTAMP}");
            }
        }
        if (params.get("insertTimeEnd")!=null){
            if (!(params.get("insertTimeEnd") instanceof String) || StringUtil.isNotEmpty((String) params.get("insertTimeEnd"))){
                sql.WHERE("INSERT_TIME <= #{insertTimeEnd,jdbcType=TIMESTAMP}");
            }
        }
        if (params.get("acceptTime") != null){
            if (!(params.get("acceptTime") instanceof String) || StringUtil.isNotEmpty((String) params.get("acceptTime"))){
                sql.WHERE("ACCEPT_TIME=#{acceptTime,jdbcType=VARCHAR}");
            }
        }
        if (params.get("acceptTimeLike")!=null){
            if (!(params.get("acceptTimeLike") instanceof String) || StringUtil.isNotEmpty((String) params.get("acceptTimeLike"))){
                sql.WHERE("ACCEPT_TIME LIKE CONCAT('%',#{acceptTimeLike,jdbcType=VARCHAR},'%')");
            }
        }
        if (params.get("acceptStation") != null){
            if (!(params.get("acceptStation") instanceof String) || StringUtil.isNotEmpty((String) params.get("acceptStation"))){
                sql.WHERE("ACCEPT_STATION=#{acceptStation,jdbcType=VARCHAR}");
            }
        }
        if (params.get("acceptStationLike")!=null){
            if (!(params.get("acceptStationLike") instanceof String) || StringUtil.isNotEmpty((String) params.get("acceptStationLike"))){
                sql.WHERE("ACCEPT_STATION LIKE CONCAT('%',#{acceptStationLike,jdbcType=VARCHAR},'%')");
            }
        }
        if (params.get("state") != null){
            if (!(params.get("state") instanceof String) || StringUtil.isNotEmpty((String) params.get("state"))){
                sql.WHERE("STATE=#{state,jdbcType=CHAR}");
            }
        }
        if (params.get("stateLike")!=null){
            if (!(params.get("stateLike") instanceof String) || StringUtil.isNotEmpty((String) params.get("stateLike"))){
                sql.WHERE("STATE LIKE CONCAT('%',#{stateLike,jdbcType=CHAR},'%')");
            }
        }
        if (params.get("ORDER_BY") != null){
            String orderBy = (String) params.get("ORDER_BY");
            String[] columns = orderBy.split(",");
            for (int i = 0; i < columns.length; i = i + 2) {
                if (i+1<columns.length){
                    sql.ORDER_BY(String.format("%s %s",columns[i],columns[i+1]));
                } else {
                    sql.ORDER_BY(columns[i]);
                }
            }
        }
        
        return sql.toString();
    }
}