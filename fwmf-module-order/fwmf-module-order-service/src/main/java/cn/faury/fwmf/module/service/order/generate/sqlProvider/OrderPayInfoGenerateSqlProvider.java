/**
 * This file was generator by Fwmf Generated
 * ！！！Do not modify this file！！ 
 *
 * @fwmf.generated 2018-12-08 15:12:42
 */
package cn.faury.fwmf.module.service.order.generate.sqlProvider;

import cn.faury.fdk.common.utils.StringUtil;
import cn.faury.fwmf.module.api.order.generate.bean.OrderPayInfoGenerateBean;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class OrderPayInfoGenerateSqlProvider {

    /**
     * This method was generated by Fwmf Generated.
     * This method corresponds to the database table order_t_order_pay_info
     *
     * @fwmf.generated 2018-12-08 15:12:42
     */
    public String insertSelective(OrderPayInfoGenerateBean record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("order_t_order_pay_info");
        
        if (record.getId() != null) {
            sql.VALUES("ID", "#{id,jdbcType=BIGINT}");
        }
        
        if (record.getOrderId() != null) {
            sql.VALUES("ORDER_ID", "#{orderId,jdbcType=BIGINT}");
        }
        
        if (record.getPayAmount() != null) {
            sql.VALUES("PAY_AMOUNT", "#{payAmount,jdbcType=DECIMAL}");
        }
        
        if (record.getPayState() != null) {
            sql.VALUES("PAY_STATE", "#{payState,jdbcType=CHAR}");
        }
        
        if (record.getPayTime() != null) {
            sql.VALUES("PAY_TIME", "#{payTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getPayStyle() != null) {
            sql.VALUES("PAY_STYLE", "#{payStyle,jdbcType=VARCHAR}");
        }
        
        if (record.getCreatePerson() != null) {
            sql.VALUES("CREATE_PERSON", "#{createPerson,jdbcType=BIGINT}");
        }
        
        if (record.getCreatePersonName() != null) {
            sql.VALUES("CREATE_PERSON_NAME", "#{createPersonName,jdbcType=VARCHAR}");
        }
        
        if (record.getCreateTime() != null) {
            sql.VALUES("CREATE_TIME", "#{createTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUpdatePerson() != null) {
            sql.VALUES("UPDATE_PERSON", "#{updatePerson,jdbcType=BIGINT}");
        }
        
        if (record.getUpdatePersonName() != null) {
            sql.VALUES("UPDATE_PERSON_NAME", "#{updatePersonName,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.VALUES("UPDATE_TIME", "#{updateTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getDzState() != null) {
            sql.VALUES("DZ_STATE", "#{dzState,jdbcType=INTEGER}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by Fwmf Generated.
     * This method corresponds to the database table order_t_order_pay_info
     *
     * @fwmf.generated 2018-12-08 15:12:42
     */
    public String updateByPrimaryKeySelective(OrderPayInfoGenerateBean record) {
        SQL sql = new SQL();
        sql.UPDATE("order_t_order_pay_info");
        
        if (record.getOrderId() != null) {
            sql.SET("ORDER_ID = #{orderId,jdbcType=BIGINT}");
        }
        
        if (record.getPayAmount() != null) {
            sql.SET("PAY_AMOUNT = #{payAmount,jdbcType=DECIMAL}");
        }
        
        if (record.getPayState() != null) {
            sql.SET("PAY_STATE = #{payState,jdbcType=CHAR}");
        }
        
        if (record.getPayTime() != null) {
            sql.SET("PAY_TIME = #{payTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getPayStyle() != null) {
            sql.SET("PAY_STYLE = #{payStyle,jdbcType=VARCHAR}");
        }
        
        if (record.getCreatePerson() != null) {
            sql.SET("CREATE_PERSON = #{createPerson,jdbcType=BIGINT}");
        }
        
        if (record.getCreatePersonName() != null) {
            sql.SET("CREATE_PERSON_NAME = #{createPersonName,jdbcType=VARCHAR}");
        }
        
        if (record.getCreateTime() != null) {
            sql.SET("CREATE_TIME = #{createTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUpdatePerson() != null) {
            sql.SET("UPDATE_PERSON = #{updatePerson,jdbcType=BIGINT}");
        }
        
        if (record.getUpdatePersonName() != null) {
            sql.SET("UPDATE_PERSON_NAME = #{updatePersonName,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.SET("UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getDzState() != null) {
            sql.SET("DZ_STATE = #{dzState,jdbcType=INTEGER}");
        }
        
        sql.WHERE("ID = #{id,jdbcType=BIGINT}");
        
        return sql.toString();
    }

    /**
     * This method was generated by Fwmf Generated.
     * This method corresponds to the database table order_t_order_pay_info
     *
     * @fwmf.generated 2018-12-08 15:12:42
     */
    public String search(Map<String, Object> params) {
        SQL sql = new SQL();
        sql.SELECT("ID, ORDER_ID, PAY_AMOUNT, PAY_STATE, PAY_TIME, PAY_STYLE, CREATE_PERSON, CREATE_PERSON_NAME");
        sql.SELECT("CREATE_TIME, UPDATE_PERSON, UPDATE_PERSON_NAME, UPDATE_TIME, DZ_STATE");
        
        sql.FROM("order_t_order_pay_info");
        
        if (params.get("id") != null){
            if (!(params.get("id") instanceof String) || StringUtil.isNotEmpty((String) params.get("id"))){
                sql.WHERE("ID=#{id,jdbcType=BIGINT}");
            }
        }
        if (params.get("ids") != null && params.get("ids") instanceof List) {
            List list = (List) params.get("ids");
            if (list != null && list.size() > 0) {
                StringBuilder inClause = new StringBuilder();
                for (int i = 0; i < list.size(); i++) {
                    inClause.append("#{ids[").append(i).append("],jdbcType=BIGINT},");
                }
                inClause.setLength(inClause.length() - 1);
                sql.WHERE("ID IN (" + inClause.toString() + ")");
            }
        }
        if (params.get("orderId") != null){
            if (!(params.get("orderId") instanceof String) || StringUtil.isNotEmpty((String) params.get("orderId"))){
                sql.WHERE("ORDER_ID=#{orderId,jdbcType=BIGINT}");
            }
        }
        if (params.get("payAmount") != null){
            if (!(params.get("payAmount") instanceof String) || StringUtil.isNotEmpty((String) params.get("payAmount"))){
                sql.WHERE("PAY_AMOUNT=#{payAmount,jdbcType=DECIMAL}");
            }
        }
        if (params.get("payState") != null){
            if (!(params.get("payState") instanceof String) || StringUtil.isNotEmpty((String) params.get("payState"))){
                sql.WHERE("PAY_STATE=#{payState,jdbcType=CHAR}");
            }
        }
        if (params.get("payStateLike")!=null){
            if (!(params.get("payStateLike") instanceof String) || StringUtil.isNotEmpty((String) params.get("payStateLike"))){
                sql.WHERE("PAY_STATE LIKE CONCAT('%',#{payStateLike,jdbcType=CHAR},'%')");
            }
        }
        if (params.get("payTime") != null){
            if (!(params.get("payTime") instanceof String) || StringUtil.isNotEmpty((String) params.get("payTime"))){
                sql.WHERE("PAY_TIME=#{payTime,jdbcType=TIMESTAMP}");
            }
        }
        if (params.get("payTimeStart")!=null){
            if (!(params.get("payTimeStart") instanceof String) || StringUtil.isNotEmpty((String) params.get("payTimeStart"))){
                sql.WHERE("PAY_TIME >= #{payTimeStart,jdbcType=TIMESTAMP}");
            }
        }
        if (params.get("payTimeEnd")!=null){
            if (!(params.get("payTimeEnd") instanceof String) || StringUtil.isNotEmpty((String) params.get("payTimeEnd"))){
                sql.WHERE("PAY_TIME <= #{payTimeEnd,jdbcType=TIMESTAMP}");
            }
        }
        if (params.get("payStyle") != null){
            if (!(params.get("payStyle") instanceof String) || StringUtil.isNotEmpty((String) params.get("payStyle"))){
                sql.WHERE("PAY_STYLE=#{payStyle,jdbcType=VARCHAR}");
            }
        }
        if (params.get("payStyleLike")!=null){
            if (!(params.get("payStyleLike") instanceof String) || StringUtil.isNotEmpty((String) params.get("payStyleLike"))){
                sql.WHERE("PAY_STYLE LIKE CONCAT('%',#{payStyleLike,jdbcType=VARCHAR},'%')");
            }
        }
        if (params.get("createPerson") != null){
            if (!(params.get("createPerson") instanceof String) || StringUtil.isNotEmpty((String) params.get("createPerson"))){
                sql.WHERE("CREATE_PERSON=#{createPerson,jdbcType=BIGINT}");
            }
        }
        if (params.get("createPersonName") != null){
            if (!(params.get("createPersonName") instanceof String) || StringUtil.isNotEmpty((String) params.get("createPersonName"))){
                sql.WHERE("CREATE_PERSON_NAME=#{createPersonName,jdbcType=VARCHAR}");
            }
        }
        if (params.get("createPersonNameLike")!=null){
            if (!(params.get("createPersonNameLike") instanceof String) || StringUtil.isNotEmpty((String) params.get("createPersonNameLike"))){
                sql.WHERE("CREATE_PERSON_NAME LIKE CONCAT('%',#{createPersonNameLike,jdbcType=VARCHAR},'%')");
            }
        }
        if (params.get("createTime") != null){
            if (!(params.get("createTime") instanceof String) || StringUtil.isNotEmpty((String) params.get("createTime"))){
                sql.WHERE("CREATE_TIME=#{createTime,jdbcType=TIMESTAMP}");
            }
        }
        if (params.get("createTimeStart")!=null){
            if (!(params.get("createTimeStart") instanceof String) || StringUtil.isNotEmpty((String) params.get("createTimeStart"))){
                sql.WHERE("CREATE_TIME >= #{createTimeStart,jdbcType=TIMESTAMP}");
            }
        }
        if (params.get("createTimeEnd")!=null){
            if (!(params.get("createTimeEnd") instanceof String) || StringUtil.isNotEmpty((String) params.get("createTimeEnd"))){
                sql.WHERE("CREATE_TIME <= #{createTimeEnd,jdbcType=TIMESTAMP}");
            }
        }
        if (params.get("updatePerson") != null){
            if (!(params.get("updatePerson") instanceof String) || StringUtil.isNotEmpty((String) params.get("updatePerson"))){
                sql.WHERE("UPDATE_PERSON=#{updatePerson,jdbcType=BIGINT}");
            }
        }
        if (params.get("updatePersonName") != null){
            if (!(params.get("updatePersonName") instanceof String) || StringUtil.isNotEmpty((String) params.get("updatePersonName"))){
                sql.WHERE("UPDATE_PERSON_NAME=#{updatePersonName,jdbcType=VARCHAR}");
            }
        }
        if (params.get("updatePersonNameLike")!=null){
            if (!(params.get("updatePersonNameLike") instanceof String) || StringUtil.isNotEmpty((String) params.get("updatePersonNameLike"))){
                sql.WHERE("UPDATE_PERSON_NAME LIKE CONCAT('%',#{updatePersonNameLike,jdbcType=VARCHAR},'%')");
            }
        }
        if (params.get("updateTime") != null){
            if (!(params.get("updateTime") instanceof String) || StringUtil.isNotEmpty((String) params.get("updateTime"))){
                sql.WHERE("UPDATE_TIME=#{updateTime,jdbcType=TIMESTAMP}");
            }
        }
        if (params.get("updateTimeStart")!=null){
            if (!(params.get("updateTimeStart") instanceof String) || StringUtil.isNotEmpty((String) params.get("updateTimeStart"))){
                sql.WHERE("UPDATE_TIME >= #{updateTimeStart,jdbcType=TIMESTAMP}");
            }
        }
        if (params.get("updateTimeEnd")!=null){
            if (!(params.get("updateTimeEnd") instanceof String) || StringUtil.isNotEmpty((String) params.get("updateTimeEnd"))){
                sql.WHERE("UPDATE_TIME <= #{updateTimeEnd,jdbcType=TIMESTAMP}");
            }
        }
        if (params.get("dzState") != null){
            if (!(params.get("dzState") instanceof String) || StringUtil.isNotEmpty((String) params.get("dzState"))){
                sql.WHERE("DZ_STATE=#{dzState,jdbcType=INTEGER}");
            }
        }
        if (params.get("ORDER_BY") != null){
            String orderBy = (String) params.get("ORDER_BY");
            String[] columns = orderBy.split(",");
            for (int i = 0; i < columns.length; i = i + 2) {
                if (i+1<columns.length){
                    sql.ORDER_BY(String.format("%s %s",columns[i],columns[i+1]));
                } else {
                    sql.ORDER_BY(columns[i]);
                }
            }
        }
        
        return sql.toString();
    }
}