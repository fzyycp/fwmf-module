/**
 * This file was generator by Fwmf Generated
 * ！！！Do not modify this file！！ 
 *
 * @fwmf.generated 2018-11-14 15:41:39
 */
package cn.faury.fwmf.module.service.order.generate.sqlProvider;

import cn.faury.fdk.common.utils.StringUtil;
import cn.faury.fwmf.module.api.order.generate.bean.PromotionInfoGenerateBean;
import org.apache.ibatis.jdbc.SQL;

import java.util.List;
import java.util.Map;

public class PromotionInfoGenerateSqlProvider {

    /**
     * This method was generated by Fwmf Generated.
     * This method corresponds to the database table order_t_promotion_info
     *
     * @fwmf.generated 2018-11-14 15:41:39
     */
    public String insertSelective(PromotionInfoGenerateBean record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("order_t_promotion_info");
        
        if (record.getPromotionId() != null) {
            sql.VALUES("PROMOTION_ID", "#{promotionId,jdbcType=BIGINT}");
        }
        
        if (record.getPromotionName() != null) {
            sql.VALUES("PROMOTION_NAME", "#{promotionName,jdbcType=VARCHAR}");
        }
        
        if (record.getPromotionSubject() != null) {
            sql.VALUES("PROMOTION_SUBJECT", "#{promotionSubject,jdbcType=CHAR}");
        }
        
        if (record.getPromotionCondition() != null) {
            sql.VALUES("PROMOTION_CONDITION", "#{promotionCondition,jdbcType=CHAR}");
        }
        
        if (record.getConditionValue() != null) {
            sql.VALUES("CONDITION_VALUE", "#{conditionValue,jdbcType=DECIMAL}");
        }
        
        if (record.getMeetOperation() != null) {
            sql.VALUES("MEET_OPERATION", "#{meetOperation,jdbcType=VARCHAR}");
        }
        
        if (record.getMeetValue() != null) {
            sql.VALUES("MEET_VALUE", "#{meetValue,jdbcType=DECIMAL}");
        }
        
        if (record.getPromotionStartTime() != null) {
            sql.VALUES("PROMOTION_START_TIME", "#{promotionStartTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getPromotionEndTime() != null) {
            sql.VALUES("PROMOTION_END_TIME", "#{promotionEndTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCreatePerson() != null) {
            sql.VALUES("CREATE_PERSON", "#{createPerson,jdbcType=VARCHAR}");
        }
        
        if (record.getCreateTime() != null) {
            sql.VALUES("CREATE_TIME", "#{createTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUpdatePerson() != null) {
            sql.VALUES("UPDATE_PERSON", "#{updatePerson,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.VALUES("UPDATE_TIME", "#{updateTime,jdbcType=TIMESTAMP}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by Fwmf Generated.
     * This method corresponds to the database table order_t_promotion_info
     *
     * @fwmf.generated 2018-11-14 15:41:39
     */
    public String updateByPrimaryKeySelective(PromotionInfoGenerateBean record) {
        SQL sql = new SQL();
        sql.UPDATE("order_t_promotion_info");
        
        if (record.getPromotionName() != null) {
            sql.SET("PROMOTION_NAME = #{promotionName,jdbcType=VARCHAR}");
        }
        
        if (record.getPromotionSubject() != null) {
            sql.SET("PROMOTION_SUBJECT = #{promotionSubject,jdbcType=CHAR}");
        }
        
        if (record.getPromotionCondition() != null) {
            sql.SET("PROMOTION_CONDITION = #{promotionCondition,jdbcType=CHAR}");
        }
        
        if (record.getConditionValue() != null) {
            sql.SET("CONDITION_VALUE = #{conditionValue,jdbcType=DECIMAL}");
        }
        
        if (record.getMeetOperation() != null) {
            sql.SET("MEET_OPERATION = #{meetOperation,jdbcType=VARCHAR}");
        }
        
        if (record.getMeetValue() != null) {
            sql.SET("MEET_VALUE = #{meetValue,jdbcType=DECIMAL}");
        }
        
        if (record.getPromotionStartTime() != null) {
            sql.SET("PROMOTION_START_TIME = #{promotionStartTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getPromotionEndTime() != null) {
            sql.SET("PROMOTION_END_TIME = #{promotionEndTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCreatePerson() != null) {
            sql.SET("CREATE_PERSON = #{createPerson,jdbcType=VARCHAR}");
        }
        
        if (record.getCreateTime() != null) {
            sql.SET("CREATE_TIME = #{createTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUpdatePerson() != null) {
            sql.SET("UPDATE_PERSON = #{updatePerson,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.SET("UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP}");
        }
        
        sql.WHERE("PROMOTION_ID = #{promotionId,jdbcType=BIGINT}");
        
        return sql.toString();
    }

    /**
     * This method was generated by Fwmf Generated.
     * This method corresponds to the database table order_t_promotion_info
     *
     * @fwmf.generated 2018-11-14 15:41:39
     */
    public String search(Map<String, Object> params) {
        SQL sql = new SQL();
        sql.SELECT("PROMOTION_ID, PROMOTION_NAME, PROMOTION_SUBJECT, PROMOTION_CONDITION, CONDITION_VALUE");
        sql.SELECT("MEET_OPERATION, MEET_VALUE, PROMOTION_START_TIME, PROMOTION_END_TIME, CREATE_PERSON");
        sql.SELECT("CREATE_TIME, UPDATE_PERSON, UPDATE_TIME");
        
        sql.FROM("order_t_promotion_info");
        
        if (params.get("promotionId") != null){
            if (!(params.get("promotionId") instanceof String) || StringUtil.isNotEmpty((String) params.get("promotionId"))){
                sql.WHERE("PROMOTION_ID=#{promotionId,jdbcType=BIGINT}");
            }
        }
        if (params.get("ids") != null && params.get("ids") instanceof List) {
            List list = (List) params.get("ids");
            if (list != null && list.size() > 0) {
                StringBuilder inClause = new StringBuilder();
                for (int i = 0; i < list.size(); i++) {
                    inClause.append("#{ids[").append(i).append("],jdbcType=BIGINT},");
                }
                inClause.setLength(inClause.length() - 1);
                sql.WHERE("PROMOTION_ID IN (" + inClause.toString() + ")");
            }
        }
        if (params.get("promotionName") != null){
            if (!(params.get("promotionName") instanceof String) || StringUtil.isNotEmpty((String) params.get("promotionName"))){
                sql.WHERE("PROMOTION_NAME=#{promotionName,jdbcType=VARCHAR}");
            }
        }
        if (params.get("promotionNameLike")!=null){
            if (!(params.get("promotionNameLike") instanceof String) || StringUtil.isNotEmpty((String) params.get("promotionNameLike"))){
                sql.WHERE("PROMOTION_NAME LIKE CONCAT('%',#{promotionNameLike,jdbcType=VARCHAR},'%')");
            }
        }
        if (params.get("promotionSubject") != null){
            if (!(params.get("promotionSubject") instanceof String) || StringUtil.isNotEmpty((String) params.get("promotionSubject"))){
                sql.WHERE("PROMOTION_SUBJECT=#{promotionSubject,jdbcType=CHAR}");
            }
        }
        if (params.get("promotionSubjectLike")!=null){
            if (!(params.get("promotionSubjectLike") instanceof String) || StringUtil.isNotEmpty((String) params.get("promotionSubjectLike"))){
                sql.WHERE("PROMOTION_SUBJECT LIKE CONCAT('%',#{promotionSubjectLike,jdbcType=CHAR},'%')");
            }
        }
        if (params.get("promotionCondition") != null){
            if (!(params.get("promotionCondition") instanceof String) || StringUtil.isNotEmpty((String) params.get("promotionCondition"))){
                sql.WHERE("PROMOTION_CONDITION=#{promotionCondition,jdbcType=CHAR}");
            }
        }
        if (params.get("promotionConditionLike")!=null){
            if (!(params.get("promotionConditionLike") instanceof String) || StringUtil.isNotEmpty((String) params.get("promotionConditionLike"))){
                sql.WHERE("PROMOTION_CONDITION LIKE CONCAT('%',#{promotionConditionLike,jdbcType=CHAR},'%')");
            }
        }
        if (params.get("conditionValue") != null){
            if (!(params.get("conditionValue") instanceof String) || StringUtil.isNotEmpty((String) params.get("conditionValue"))){
                sql.WHERE("CONDITION_VALUE=#{conditionValue,jdbcType=DECIMAL}");
            }
        }
        if (params.get("meetOperation") != null){
            if (!(params.get("meetOperation") instanceof String) || StringUtil.isNotEmpty((String) params.get("meetOperation"))){
                sql.WHERE("MEET_OPERATION=#{meetOperation,jdbcType=VARCHAR}");
            }
        }
        if (params.get("meetOperationLike")!=null){
            if (!(params.get("meetOperationLike") instanceof String) || StringUtil.isNotEmpty((String) params.get("meetOperationLike"))){
                sql.WHERE("MEET_OPERATION LIKE CONCAT('%',#{meetOperationLike,jdbcType=VARCHAR},'%')");
            }
        }
        if (params.get("meetValue") != null){
            if (!(params.get("meetValue") instanceof String) || StringUtil.isNotEmpty((String) params.get("meetValue"))){
                sql.WHERE("MEET_VALUE=#{meetValue,jdbcType=DECIMAL}");
            }
        }
        if (params.get("promotionStartTime") != null){
            if (!(params.get("promotionStartTime") instanceof String) || StringUtil.isNotEmpty((String) params.get("promotionStartTime"))){
                sql.WHERE("PROMOTION_START_TIME=#{promotionStartTime,jdbcType=TIMESTAMP}");
            }
        }
        if (params.get("promotionStartTimeStart")!=null){
            if (!(params.get("promotionStartTimeStart") instanceof String) || StringUtil.isNotEmpty((String) params.get("promotionStartTimeStart"))){
                sql.WHERE("PROMOTION_START_TIME >= #{promotionStartTimeStart,jdbcType=TIMESTAMP}");
            }
        }
        if (params.get("promotionStartTimeEnd")!=null){
            if (!(params.get("promotionStartTimeEnd") instanceof String) || StringUtil.isNotEmpty((String) params.get("promotionStartTimeEnd"))){
                sql.WHERE("PROMOTION_START_TIME <= #{promotionStartTimeEnd,jdbcType=TIMESTAMP}");
            }
        }
        if (params.get("promotionEndTime") != null){
            if (!(params.get("promotionEndTime") instanceof String) || StringUtil.isNotEmpty((String) params.get("promotionEndTime"))){
                sql.WHERE("PROMOTION_END_TIME=#{promotionEndTime,jdbcType=TIMESTAMP}");
            }
        }
        if (params.get("promotionEndTimeStart")!=null){
            if (!(params.get("promotionEndTimeStart") instanceof String) || StringUtil.isNotEmpty((String) params.get("promotionEndTimeStart"))){
                sql.WHERE("PROMOTION_END_TIME >= #{promotionEndTimeStart,jdbcType=TIMESTAMP}");
            }
        }
        if (params.get("promotionEndTimeEnd")!=null){
            if (!(params.get("promotionEndTimeEnd") instanceof String) || StringUtil.isNotEmpty((String) params.get("promotionEndTimeEnd"))){
                sql.WHERE("PROMOTION_END_TIME <= #{promotionEndTimeEnd,jdbcType=TIMESTAMP}");
            }
        }
        if (params.get("createPerson") != null){
            if (!(params.get("createPerson") instanceof String) || StringUtil.isNotEmpty((String) params.get("createPerson"))){
                sql.WHERE("CREATE_PERSON=#{createPerson,jdbcType=VARCHAR}");
            }
        }
        if (params.get("createPersonLike")!=null){
            if (!(params.get("createPersonLike") instanceof String) || StringUtil.isNotEmpty((String) params.get("createPersonLike"))){
                sql.WHERE("CREATE_PERSON LIKE CONCAT('%',#{createPersonLike,jdbcType=VARCHAR},'%')");
            }
        }
        if (params.get("createTime") != null){
            if (!(params.get("createTime") instanceof String) || StringUtil.isNotEmpty((String) params.get("createTime"))){
                sql.WHERE("CREATE_TIME=#{createTime,jdbcType=TIMESTAMP}");
            }
        }
        if (params.get("createTimeStart")!=null){
            if (!(params.get("createTimeStart") instanceof String) || StringUtil.isNotEmpty((String) params.get("createTimeStart"))){
                sql.WHERE("CREATE_TIME >= #{createTimeStart,jdbcType=TIMESTAMP}");
            }
        }
        if (params.get("createTimeEnd")!=null){
            if (!(params.get("createTimeEnd") instanceof String) || StringUtil.isNotEmpty((String) params.get("createTimeEnd"))){
                sql.WHERE("CREATE_TIME <= #{createTimeEnd,jdbcType=TIMESTAMP}");
            }
        }
        if (params.get("updatePerson") != null){
            if (!(params.get("updatePerson") instanceof String) || StringUtil.isNotEmpty((String) params.get("updatePerson"))){
                sql.WHERE("UPDATE_PERSON=#{updatePerson,jdbcType=VARCHAR}");
            }
        }
        if (params.get("updatePersonLike")!=null){
            if (!(params.get("updatePersonLike") instanceof String) || StringUtil.isNotEmpty((String) params.get("updatePersonLike"))){
                sql.WHERE("UPDATE_PERSON LIKE CONCAT('%',#{updatePersonLike,jdbcType=VARCHAR},'%')");
            }
        }
        if (params.get("updateTime") != null){
            if (!(params.get("updateTime") instanceof String) || StringUtil.isNotEmpty((String) params.get("updateTime"))){
                sql.WHERE("UPDATE_TIME=#{updateTime,jdbcType=TIMESTAMP}");
            }
        }
        if (params.get("updateTimeStart")!=null){
            if (!(params.get("updateTimeStart") instanceof String) || StringUtil.isNotEmpty((String) params.get("updateTimeStart"))){
                sql.WHERE("UPDATE_TIME >= #{updateTimeStart,jdbcType=TIMESTAMP}");
            }
        }
        if (params.get("updateTimeEnd")!=null){
            if (!(params.get("updateTimeEnd") instanceof String) || StringUtil.isNotEmpty((String) params.get("updateTimeEnd"))){
                sql.WHERE("UPDATE_TIME <= #{updateTimeEnd,jdbcType=TIMESTAMP}");
            }
        }
        if (params.get("ORDER_BY") != null){
            String orderBy = (String) params.get("ORDER_BY");
            String[] columns = orderBy.split(",");
            for (int i = 0; i < columns.length; i = i + 2) {
                if (i+1<columns.length){
                    sql.ORDER_BY(String.format("%s %s",columns[i],columns[i+1]));
                } else {
                    sql.ORDER_BY(columns[i]);
                }
            }
        }
        
        return sql.toString();
    }
}