/**
 * This file was generator by Fwmf Generated
 * ！！！Do not modify this file！！ 
 *
 * @fwmf.generated 2018-12-08 15:12:42
 */
package cn.faury.fwmf.module.service.order.generate.sqlProvider;

import cn.faury.fdk.common.utils.StringUtil;
import cn.faury.fwmf.module.api.order.generate.bean.OrderOperateInfoGenerateBean;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class OrderOperateInfoGenerateSqlProvider {

    /**
     * This method was generated by Fwmf Generated.
     * This method corresponds to the database table order_t_order_operate_info
     *
     * @fwmf.generated 2018-12-08 15:12:42
     */
    public String insertSelective(OrderOperateInfoGenerateBean record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("order_t_order_operate_info");
        
        if (record.getId() != null) {
            sql.VALUES("ID", "#{id,jdbcType=BIGINT}");
        }
        
        if (record.getOrderId() != null) {
            sql.VALUES("ORDER_ID", "#{orderId,jdbcType=BIGINT}");
        }
        
        if (record.getOperateTypeId() != null) {
            sql.VALUES("OPERATE_TYPE_ID", "#{operateTypeId,jdbcType=CHAR}");
        }
        
        if (record.getOperateTypeDesc() != null) {
            sql.VALUES("OPERATE_TYPE_DESC", "#{operateTypeDesc,jdbcType=VARCHAR}");
        }
        
        if (record.getOperaterId() != null) {
            sql.VALUES("OPERATER_ID", "#{operaterId,jdbcType=BIGINT}");
        }
        
        if (record.getOperaterName() != null) {
            sql.VALUES("OPERATER_NAME", "#{operaterName,jdbcType=VARCHAR}");
        }
        
        if (record.getIsShopping() != null) {
            sql.VALUES("IS_SHOPPING", "#{isShopping,jdbcType=CHAR}");
        }
        
        if (record.getOperateContent() != null) {
            sql.VALUES("OPERATE_CONTENT", "#{operateContent,jdbcType=VARCHAR}");
        }
        
        if (record.getOperateTime() != null) {
            sql.VALUES("OPERATE_TIME", "#{operateTime,jdbcType=TIMESTAMP}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by Fwmf Generated.
     * This method corresponds to the database table order_t_order_operate_info
     *
     * @fwmf.generated 2018-12-08 15:12:42
     */
    public String updateByPrimaryKeySelective(OrderOperateInfoGenerateBean record) {
        SQL sql = new SQL();
        sql.UPDATE("order_t_order_operate_info");
        
        if (record.getOrderId() != null) {
            sql.SET("ORDER_ID = #{orderId,jdbcType=BIGINT}");
        }
        
        if (record.getOperateTypeId() != null) {
            sql.SET("OPERATE_TYPE_ID = #{operateTypeId,jdbcType=CHAR}");
        }
        
        if (record.getOperateTypeDesc() != null) {
            sql.SET("OPERATE_TYPE_DESC = #{operateTypeDesc,jdbcType=VARCHAR}");
        }
        
        if (record.getOperaterId() != null) {
            sql.SET("OPERATER_ID = #{operaterId,jdbcType=BIGINT}");
        }
        
        if (record.getOperaterName() != null) {
            sql.SET("OPERATER_NAME = #{operaterName,jdbcType=VARCHAR}");
        }
        
        if (record.getIsShopping() != null) {
            sql.SET("IS_SHOPPING = #{isShopping,jdbcType=CHAR}");
        }
        
        if (record.getOperateContent() != null) {
            sql.SET("OPERATE_CONTENT = #{operateContent,jdbcType=VARCHAR}");
        }
        
        if (record.getOperateTime() != null) {
            sql.SET("OPERATE_TIME = #{operateTime,jdbcType=TIMESTAMP}");
        }
        
        sql.WHERE("ID = #{id,jdbcType=BIGINT}");
        
        return sql.toString();
    }

    /**
     * This method was generated by Fwmf Generated.
     * This method corresponds to the database table order_t_order_operate_info
     *
     * @fwmf.generated 2018-12-08 15:12:42
     */
    public String search(Map<String, Object> params) {
        SQL sql = new SQL();
        sql.SELECT("ID, ORDER_ID, OPERATE_TYPE_ID, OPERATE_TYPE_DESC, OPERATER_ID, OPERATER_NAME, IS_SHOPPING");
        sql.SELECT("OPERATE_CONTENT, OPERATE_TIME");
        
        sql.FROM("order_t_order_operate_info");
        
        if (params.get("id") != null){
            if (!(params.get("id") instanceof String) || StringUtil.isNotEmpty((String) params.get("id"))){
                sql.WHERE("ID=#{id,jdbcType=BIGINT}");
            }
        }
        if (params.get("ids") != null && params.get("ids") instanceof List) {
            List list = (List) params.get("ids");
            if (list != null && list.size() > 0) {
                StringBuilder inClause = new StringBuilder();
                for (int i = 0; i < list.size(); i++) {
                    inClause.append("#{ids[").append(i).append("],jdbcType=BIGINT},");
                }
                inClause.setLength(inClause.length() - 1);
                sql.WHERE("ID IN (" + inClause.toString() + ")");
            }
        }
        if (params.get("orderId") != null){
            if (!(params.get("orderId") instanceof String) || StringUtil.isNotEmpty((String) params.get("orderId"))){
                sql.WHERE("ORDER_ID=#{orderId,jdbcType=BIGINT}");
            }
        }
        if (params.get("operateTypeId") != null){
            if (!(params.get("operateTypeId") instanceof String) || StringUtil.isNotEmpty((String) params.get("operateTypeId"))){
                sql.WHERE("OPERATE_TYPE_ID=#{operateTypeId,jdbcType=CHAR}");
            }
        }
        if (params.get("operateTypeIdLike")!=null){
            if (!(params.get("operateTypeIdLike") instanceof String) || StringUtil.isNotEmpty((String) params.get("operateTypeIdLike"))){
                sql.WHERE("OPERATE_TYPE_ID LIKE CONCAT('%',#{operateTypeIdLike,jdbcType=CHAR},'%')");
            }
        }
        if (params.get("operateTypeDesc") != null){
            if (!(params.get("operateTypeDesc") instanceof String) || StringUtil.isNotEmpty((String) params.get("operateTypeDesc"))){
                sql.WHERE("OPERATE_TYPE_DESC=#{operateTypeDesc,jdbcType=VARCHAR}");
            }
        }
        if (params.get("operateTypeDescLike")!=null){
            if (!(params.get("operateTypeDescLike") instanceof String) || StringUtil.isNotEmpty((String) params.get("operateTypeDescLike"))){
                sql.WHERE("OPERATE_TYPE_DESC LIKE CONCAT('%',#{operateTypeDescLike,jdbcType=VARCHAR},'%')");
            }
        }
        if (params.get("operaterId") != null){
            if (!(params.get("operaterId") instanceof String) || StringUtil.isNotEmpty((String) params.get("operaterId"))){
                sql.WHERE("OPERATER_ID=#{operaterId,jdbcType=BIGINT}");
            }
        }
        if (params.get("operaterName") != null){
            if (!(params.get("operaterName") instanceof String) || StringUtil.isNotEmpty((String) params.get("operaterName"))){
                sql.WHERE("OPERATER_NAME=#{operaterName,jdbcType=VARCHAR}");
            }
        }
        if (params.get("operaterNameLike")!=null){
            if (!(params.get("operaterNameLike") instanceof String) || StringUtil.isNotEmpty((String) params.get("operaterNameLike"))){
                sql.WHERE("OPERATER_NAME LIKE CONCAT('%',#{operaterNameLike,jdbcType=VARCHAR},'%')");
            }
        }
        if (params.get("isShopping") != null){
            if (!(params.get("isShopping") instanceof String) || StringUtil.isNotEmpty((String) params.get("isShopping"))){
                sql.WHERE("IS_SHOPPING=#{isShopping,jdbcType=CHAR}");
            }
        }
        if (params.get("isShoppingLike")!=null){
            if (!(params.get("isShoppingLike") instanceof String) || StringUtil.isNotEmpty((String) params.get("isShoppingLike"))){
                sql.WHERE("IS_SHOPPING LIKE CONCAT('%',#{isShoppingLike,jdbcType=CHAR},'%')");
            }
        }
        if (params.get("operateContent") != null){
            if (!(params.get("operateContent") instanceof String) || StringUtil.isNotEmpty((String) params.get("operateContent"))){
                sql.WHERE("OPERATE_CONTENT=#{operateContent,jdbcType=VARCHAR}");
            }
        }
        if (params.get("operateContentLike")!=null){
            if (!(params.get("operateContentLike") instanceof String) || StringUtil.isNotEmpty((String) params.get("operateContentLike"))){
                sql.WHERE("OPERATE_CONTENT LIKE CONCAT('%',#{operateContentLike,jdbcType=VARCHAR},'%')");
            }
        }
        if (params.get("operateTime") != null){
            if (!(params.get("operateTime") instanceof String) || StringUtil.isNotEmpty((String) params.get("operateTime"))){
                sql.WHERE("OPERATE_TIME=#{operateTime,jdbcType=TIMESTAMP}");
            }
        }
        if (params.get("operateTimeStart")!=null){
            if (!(params.get("operateTimeStart") instanceof String) || StringUtil.isNotEmpty((String) params.get("operateTimeStart"))){
                sql.WHERE("OPERATE_TIME >= #{operateTimeStart,jdbcType=TIMESTAMP}");
            }
        }
        if (params.get("operateTimeEnd")!=null){
            if (!(params.get("operateTimeEnd") instanceof String) || StringUtil.isNotEmpty((String) params.get("operateTimeEnd"))){
                sql.WHERE("OPERATE_TIME <= #{operateTimeEnd,jdbcType=TIMESTAMP}");
            }
        }
        if (params.get("ORDER_BY") != null){
            String orderBy = (String) params.get("ORDER_BY");
            String[] columns = orderBy.split(",");
            for (int i = 0; i < columns.length; i = i + 2) {
                if (i+1<columns.length){
                    sql.ORDER_BY(String.format("%s %s",columns[i],columns[i+1]));
                } else {
                    sql.ORDER_BY(columns[i]);
                }
            }
        }
        
        return sql.toString();
    }
}