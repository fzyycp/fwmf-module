/**
 * This file was generator by Fwmf Generated
 * ！！！Do not modify this file！！ 
 *
 * @fwmf.generated 2018-12-08 15:12:42
 */
package cn.faury.fwmf.module.service.order.generate.sqlProvider;

import cn.faury.fdk.common.utils.StringUtil;
import cn.faury.fwmf.module.api.order.generate.bean.PostageRAreaGenerateBean;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class PostageRAreaGenerateSqlProvider {

    /**
     * This method was generated by Fwmf Generated.
     * This method corresponds to the database table order_t_postage_r_area
     *
     * @fwmf.generated 2018-12-08 15:12:42
     */
    public String insertSelective(PostageRAreaGenerateBean record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("order_t_postage_r_area");
        
        if (record.getId() != null) {
            sql.VALUES("ID", "#{id,jdbcType=BIGINT}");
        }
        
        if (record.getPostageId() != null) {
            sql.VALUES("POSTAGE_ID", "#{postageId,jdbcType=BIGINT}");
        }
        
        if (record.getAreaCodeProvince() != null) {
            sql.VALUES("AREA_CODE_PROVINCE", "#{areaCodeProvince,jdbcType=VARCHAR}");
        }
        
        if (record.getAreaDescProvince() != null) {
            sql.VALUES("AREA_DESC_PROVINCE", "#{areaDescProvince,jdbcType=VARCHAR}");
        }
        
        if (record.getGoodsCount() != null) {
            sql.VALUES("GOODS_COUNT", "#{goodsCount,jdbcType=INTEGER}");
        }
        
        if (record.getPostagePrice() != null) {
            sql.VALUES("POSTAGE_PRICE", "#{postagePrice,jdbcType=DECIMAL}");
        }
        
        if (record.getIncreaseGoodsCount() != null) {
            sql.VALUES("INCREASE_GOODS_COUNT", "#{increaseGoodsCount,jdbcType=INTEGER}");
        }
        
        if (record.getIncreasePostagePrice() != null) {
            sql.VALUES("INCREASE_POSTAGE_PRICE", "#{increasePostagePrice,jdbcType=DECIMAL}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by Fwmf Generated.
     * This method corresponds to the database table order_t_postage_r_area
     *
     * @fwmf.generated 2018-12-08 15:12:42
     */
    public String updateByPrimaryKeySelective(PostageRAreaGenerateBean record) {
        SQL sql = new SQL();
        sql.UPDATE("order_t_postage_r_area");
        
        if (record.getPostageId() != null) {
            sql.SET("POSTAGE_ID = #{postageId,jdbcType=BIGINT}");
        }
        
        if (record.getAreaCodeProvince() != null) {
            sql.SET("AREA_CODE_PROVINCE = #{areaCodeProvince,jdbcType=VARCHAR}");
        }
        
        if (record.getAreaDescProvince() != null) {
            sql.SET("AREA_DESC_PROVINCE = #{areaDescProvince,jdbcType=VARCHAR}");
        }
        
        if (record.getGoodsCount() != null) {
            sql.SET("GOODS_COUNT = #{goodsCount,jdbcType=INTEGER}");
        }
        
        if (record.getPostagePrice() != null) {
            sql.SET("POSTAGE_PRICE = #{postagePrice,jdbcType=DECIMAL}");
        }
        
        if (record.getIncreaseGoodsCount() != null) {
            sql.SET("INCREASE_GOODS_COUNT = #{increaseGoodsCount,jdbcType=INTEGER}");
        }
        
        if (record.getIncreasePostagePrice() != null) {
            sql.SET("INCREASE_POSTAGE_PRICE = #{increasePostagePrice,jdbcType=DECIMAL}");
        }
        
        sql.WHERE("ID = #{id,jdbcType=BIGINT}");
        
        return sql.toString();
    }

    /**
     * This method was generated by Fwmf Generated.
     * This method corresponds to the database table order_t_postage_r_area
     *
     * @fwmf.generated 2018-12-08 15:12:42
     */
    public String search(Map<String, Object> params) {
        SQL sql = new SQL();
        sql.SELECT("ID, POSTAGE_ID, AREA_CODE_PROVINCE, AREA_DESC_PROVINCE, GOODS_COUNT, POSTAGE_PRICE");
        sql.SELECT("INCREASE_GOODS_COUNT, INCREASE_POSTAGE_PRICE");
        
        sql.FROM("order_t_postage_r_area");
        
        if (params.get("id") != null){
            if (!(params.get("id") instanceof String) || StringUtil.isNotEmpty((String) params.get("id"))){
                sql.WHERE("ID=#{id,jdbcType=BIGINT}");
            }
        }
        if (params.get("ids") != null && params.get("ids") instanceof List) {
            List list = (List) params.get("ids");
            if (list != null && list.size() > 0) {
                StringBuilder inClause = new StringBuilder();
                for (int i = 0; i < list.size(); i++) {
                    inClause.append("#{ids[").append(i).append("],jdbcType=BIGINT},");
                }
                inClause.setLength(inClause.length() - 1);
                sql.WHERE("ID IN (" + inClause.toString() + ")");
            }
        }
        if (params.get("postageId") != null){
            if (!(params.get("postageId") instanceof String) || StringUtil.isNotEmpty((String) params.get("postageId"))){
                sql.WHERE("POSTAGE_ID=#{postageId,jdbcType=BIGINT}");
            }
        }
        if (params.get("areaCodeProvince") != null){
            if (!(params.get("areaCodeProvince") instanceof String) || StringUtil.isNotEmpty((String) params.get("areaCodeProvince"))){
                sql.WHERE("AREA_CODE_PROVINCE=#{areaCodeProvince,jdbcType=VARCHAR}");
            }
        }
        if (params.get("areaCodeProvinceLike")!=null){
            if (!(params.get("areaCodeProvinceLike") instanceof String) || StringUtil.isNotEmpty((String) params.get("areaCodeProvinceLike"))){
                sql.WHERE("AREA_CODE_PROVINCE LIKE CONCAT('%',#{areaCodeProvinceLike,jdbcType=VARCHAR},'%')");
            }
        }
        if (params.get("areaDescProvince") != null){
            if (!(params.get("areaDescProvince") instanceof String) || StringUtil.isNotEmpty((String) params.get("areaDescProvince"))){
                sql.WHERE("AREA_DESC_PROVINCE=#{areaDescProvince,jdbcType=VARCHAR}");
            }
        }
        if (params.get("areaDescProvinceLike")!=null){
            if (!(params.get("areaDescProvinceLike") instanceof String) || StringUtil.isNotEmpty((String) params.get("areaDescProvinceLike"))){
                sql.WHERE("AREA_DESC_PROVINCE LIKE CONCAT('%',#{areaDescProvinceLike,jdbcType=VARCHAR},'%')");
            }
        }
        if (params.get("goodsCount") != null){
            if (!(params.get("goodsCount") instanceof String) || StringUtil.isNotEmpty((String) params.get("goodsCount"))){
                sql.WHERE("GOODS_COUNT=#{goodsCount,jdbcType=INTEGER}");
            }
        }
        if (params.get("postagePrice") != null){
            if (!(params.get("postagePrice") instanceof String) || StringUtil.isNotEmpty((String) params.get("postagePrice"))){
                sql.WHERE("POSTAGE_PRICE=#{postagePrice,jdbcType=DECIMAL}");
            }
        }
        if (params.get("increaseGoodsCount") != null){
            if (!(params.get("increaseGoodsCount") instanceof String) || StringUtil.isNotEmpty((String) params.get("increaseGoodsCount"))){
                sql.WHERE("INCREASE_GOODS_COUNT=#{increaseGoodsCount,jdbcType=INTEGER}");
            }
        }
        if (params.get("increasePostagePrice") != null){
            if (!(params.get("increasePostagePrice") instanceof String) || StringUtil.isNotEmpty((String) params.get("increasePostagePrice"))){
                sql.WHERE("INCREASE_POSTAGE_PRICE=#{increasePostagePrice,jdbcType=DECIMAL}");
            }
        }
        if (params.get("ORDER_BY") != null){
            String orderBy = (String) params.get("ORDER_BY");
            String[] columns = orderBy.split(",");
            for (int i = 0; i < columns.length; i = i + 2) {
                if (i+1<columns.length){
                    sql.ORDER_BY(String.format("%s %s",columns[i],columns[i+1]));
                } else {
                    sql.ORDER_BY(columns[i]);
                }
            }
        }
        
        return sql.toString();
    }
}